// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  fullName      String    @db.VarChar(80)
  email         String    @unique
  emailVerified DateTime?
  password      String?
  picture       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  bookmarks    Bookmark[]
  reviews      Review[]   @relation("review")
  bookings     Booking[]
  likedReviews Review[]
}

model Bookmark {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String

  @@unique([userId, todoId])
  @@index([todoId])
}

model Todo {
  id                       String   @id @default(cuid())
  title                    String   @unique @db.VarChar(100)
  description              String?  @db.Text
  includes                 String
  highlights               String
  price                    Int
  minReservationDay        Int
  isActive                 Boolean  @default(true)
  isRefundable             Boolean
  isInstantConfirmation    Boolean
  earliestAvailabilityDate DateTime
  latestAvailabilityDate   DateTime
  earliestBookingDate      DateTime

  longLat LongLat?

  partner   Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId String

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  itinerary Itinerary?

  rating Rating?

  packages  Package[]
  images    Image[]
  bookmarks Bookmark[]
  reviews   Review[]
  bookings  Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([partnerId])
  @@index([locationId])
  @@index([categoryId])
}

model LongLat {
  id        String @id @default(cuid())
  longitude Float
  latitude  Float

  todoId String @unique
  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
}

model Package {
  id          String @id @default(cuid())
  pax         Int
  price       Int
  description String
  inlcudes    String

  todoId String
  todo   Todo   @relation(fields: [todoId], references: [id])

  @@index([todoId])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())

  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String

  Review       Review? @relation(fields: [reviewUserId, reviewTodoId], references: [userId, todoId], onDelete: Cascade)
  reviewUserId String?
  reviewTodoId String?

  @@index([todoId])
  @@index([reviewUserId, reviewTodoId])
}

model Partner {
  id          String @id @default(cuid())
  email       String @unique
  name        String @unique @db.VarChar(36)
  description String @db.Text
  imageUrl    String

  products Todo[]
  rating   Rating?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id          String @id @default(cuid())
  average     Float  @default(0)
  reviewCount Int    @default(0)

  todo   Todo?   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String? @unique

  partner   Partner? @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  partnerId String?  @unique
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images Image[]

  likes User[]

  user   User   @relation("review", references: [id], fields: [userId], onDelete: Cascade)
  userId String

  todo   Todo?   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String?

  @@unique([userId, todoId])
  @@index([todoId])
}

model Location {
  id         String @id @default(cuid())
  areaCodeId String
  areaCode   Area   @relation(fields: [areaCodeId], references: [areaId], onDelete: Cascade)
  cityCodeId String
  cityCode   City   @relation(fields: [cityCodeId], references: [cityId], onDelete: Cascade)

  regionCode   Region @relation(fields: [regionCodeId], references: [regionId], onDelete: Cascade)
  regionCodeId String

  countryCode   Country @relation(fields: [countryCodeId], references: [name], onDelete: Cascade)
  countryCodeId String

  todos Todo[]

  @@unique([areaCodeId, cityCodeId, regionCodeId, countryCodeId])
  @@index([cityCodeId])
  @@index([regionCodeId])
  @@index([countryCodeId])
}

model Area {
  areaId String @unique
  name   String

  countryId String
  country   Country @relation(fields: [countryId], references: [name], onDelete: Cascade)

  locations Location[]

  @@index([countryId])
}

model City {
  cityId String @unique
  name   String

  countryId String
  country   Country @relation(fields: [countryId], references: [name], onDelete: Cascade)

  locations Location[]

  @@index([countryId])
}

model Region {
  regionId String @unique
  name     String

  country   Country @relation(fields: [countryId], references: [name], onDelete: Cascade)
  countryId String

  locations Location[]

  @@index([countryId])
}

model Country {
  name String @unique

  areas     Area[]
  cities    City[]
  regions   Region[]
  locations Location[]
}

model Category {
  id   String @id @default(cuid())
  name String @unique @db.VarChar(30)

  todos Todo[]
}

model Itinerary {
  id       String @id @default(cuid())
  totalDay Int

  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String @unique

  schedules Schedule[]
}

model Schedule {
  id       String @id @default(cuid())
  activity String @db.VarChar(100)
  time     String
  dayCount Int

  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  itineraryId String

  @@index([itineraryId])
}

model Booking {
  id         String   @id @default(cuid())
  quantity   Int
  totalPrice Int
  date       DateTime
  status     Status   @default(UNPAID)
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  todo   Todo   @relation(fields: [todoId], references: [id], onDelete: Cascade)
  todoId String

  @@index([userId])
  @@index([todoId])
}

enum Status {
  UNPAID
  PAID
}
